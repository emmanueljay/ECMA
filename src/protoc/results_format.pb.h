// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: results_format.proto

#ifndef PROTOBUF_results_5fformat_2eproto__INCLUDED
#define PROTOBUF_results_5fformat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ecma_protoc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_results_5fformat_2eproto();
void protobuf_AssignDesc_results_5fformat_2eproto();
void protobuf_ShutdownFile_results_5fformat_2eproto();

class Results;
class Simu;
class Simu_PhoneNumber;

enum Simu_PhoneType {
  Simu_PhoneType_MOBILE = 0,
  Simu_PhoneType_HOME = 1,
  Simu_PhoneType_WORK = 2,
  Simu_PhoneType_Simu_PhoneType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Simu_PhoneType_Simu_PhoneType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Simu_PhoneType_IsValid(int value);
const Simu_PhoneType Simu_PhoneType_PhoneType_MIN = Simu_PhoneType_MOBILE;
const Simu_PhoneType Simu_PhoneType_PhoneType_MAX = Simu_PhoneType_WORK;
const int Simu_PhoneType_PhoneType_ARRAYSIZE = Simu_PhoneType_PhoneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Simu_PhoneType_descriptor();
inline const ::std::string& Simu_PhoneType_Name(Simu_PhoneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Simu_PhoneType_descriptor(), value);
}
inline bool Simu_PhoneType_Parse(
    const ::std::string& name, Simu_PhoneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Simu_PhoneType>(
    Simu_PhoneType_descriptor(), name, value);
}
// ===================================================================

class Simu_PhoneNumber : public ::google::protobuf::Message {
 public:
  Simu_PhoneNumber();
  virtual ~Simu_PhoneNumber();

  Simu_PhoneNumber(const Simu_PhoneNumber& from);

  inline Simu_PhoneNumber& operator=(const Simu_PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Simu_PhoneNumber& default_instance();

  void Swap(Simu_PhoneNumber* other);

  // implements Message ----------------------------------------------

  inline Simu_PhoneNumber* New() const { return New(NULL); }

  Simu_PhoneNumber* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Simu_PhoneNumber& from);
  void MergeFrom(const Simu_PhoneNumber& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Simu_PhoneNumber* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string number = 1;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  const ::std::string& number() const;
  void set_number(const ::std::string& value);
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  ::std::string* mutable_number();
  ::std::string* release_number();
  void set_allocated_number(::std::string* number);

  // optional .ecma_protoc.Simu.PhoneType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::ecma_protoc::Simu_PhoneType type() const;
  void set_type(::ecma_protoc::Simu_PhoneType value);

  // @@protoc_insertion_point(class_scope:ecma_protoc.Simu.PhoneNumber)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr number_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_results_5fformat_2eproto();
  friend void protobuf_AssignDesc_results_5fformat_2eproto();
  friend void protobuf_ShutdownFile_results_5fformat_2eproto();

  void InitAsDefaultInstance();
  static Simu_PhoneNumber* default_instance_;
};
// -------------------------------------------------------------------

class Simu : public ::google::protobuf::Message {
 public:
  Simu();
  virtual ~Simu();

  Simu(const Simu& from);

  inline Simu& operator=(const Simu& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Simu& default_instance();

  void Swap(Simu* other);

  // implements Message ----------------------------------------------

  inline Simu* New() const { return New(NULL); }

  Simu* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Simu& from);
  void MergeFrom(const Simu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Simu* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Simu_PhoneNumber PhoneNumber;

  typedef Simu_PhoneType PhoneType;
  static const PhoneType MOBILE = Simu_PhoneType_MOBILE;
  static const PhoneType HOME = Simu_PhoneType_HOME;
  static const PhoneType WORK = Simu_PhoneType_WORK;
  static inline bool PhoneType_IsValid(int value) {
    return Simu_PhoneType_IsValid(value);
  }
  static const PhoneType PhoneType_MIN =
    Simu_PhoneType_PhoneType_MIN;
  static const PhoneType PhoneType_MAX =
    Simu_PhoneType_PhoneType_MAX;
  static const int PhoneType_ARRAYSIZE =
    Simu_PhoneType_PhoneType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PhoneType_descriptor() {
    return Simu_PhoneType_descriptor();
  }
  static inline const ::std::string& PhoneType_Name(PhoneType value) {
    return Simu_PhoneType_Name(value);
  }
  static inline bool PhoneType_Parse(const ::std::string& name,
      PhoneType* value) {
    return Simu_PhoneType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string email = 3;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // repeated .ecma_protoc.Simu.PhoneNumber phones = 4;
  int phones_size() const;
  void clear_phones();
  static const int kPhonesFieldNumber = 4;
  const ::ecma_protoc::Simu_PhoneNumber& phones(int index) const;
  ::ecma_protoc::Simu_PhoneNumber* mutable_phones(int index);
  ::ecma_protoc::Simu_PhoneNumber* add_phones();
  ::google::protobuf::RepeatedPtrField< ::ecma_protoc::Simu_PhoneNumber >*
      mutable_phones();
  const ::google::protobuf::RepeatedPtrField< ::ecma_protoc::Simu_PhoneNumber >&
      phones() const;

  // @@protoc_insertion_point(class_scope:ecma_protoc.Simu)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::RepeatedPtrField< ::ecma_protoc::Simu_PhoneNumber > phones_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_results_5fformat_2eproto();
  friend void protobuf_AssignDesc_results_5fformat_2eproto();
  friend void protobuf_ShutdownFile_results_5fformat_2eproto();

  void InitAsDefaultInstance();
  static Simu* default_instance_;
};
// -------------------------------------------------------------------

class Results : public ::google::protobuf::Message {
 public:
  Results();
  virtual ~Results();

  Results(const Results& from);

  inline Results& operator=(const Results& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Results& default_instance();

  void Swap(Results* other);

  // implements Message ----------------------------------------------

  inline Results* New() const { return New(NULL); }

  Results* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Results& from);
  void MergeFrom(const Results& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Results* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ecma_protoc.Simu simu = 1;
  int simu_size() const;
  void clear_simu();
  static const int kSimuFieldNumber = 1;
  const ::ecma_protoc::Simu& simu(int index) const;
  ::ecma_protoc::Simu* mutable_simu(int index);
  ::ecma_protoc::Simu* add_simu();
  ::google::protobuf::RepeatedPtrField< ::ecma_protoc::Simu >*
      mutable_simu();
  const ::google::protobuf::RepeatedPtrField< ::ecma_protoc::Simu >&
      simu() const;

  // @@protoc_insertion_point(class_scope:ecma_protoc.Results)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::ecma_protoc::Simu > simu_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_results_5fformat_2eproto();
  friend void protobuf_AssignDesc_results_5fformat_2eproto();
  friend void protobuf_ShutdownFile_results_5fformat_2eproto();

  void InitAsDefaultInstance();
  static Results* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Simu_PhoneNumber

// optional string number = 1;
inline void Simu_PhoneNumber::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Simu_PhoneNumber::number() const {
  // @@protoc_insertion_point(field_get:ecma_protoc.Simu.PhoneNumber.number)
  return number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Simu_PhoneNumber::set_number(const ::std::string& value) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ecma_protoc.Simu.PhoneNumber.number)
}
inline void Simu_PhoneNumber::set_number(const char* value) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ecma_protoc.Simu.PhoneNumber.number)
}
inline void Simu_PhoneNumber::set_number(const char* value, size_t size) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ecma_protoc.Simu.PhoneNumber.number)
}
inline ::std::string* Simu_PhoneNumber::mutable_number() {
  
  // @@protoc_insertion_point(field_mutable:ecma_protoc.Simu.PhoneNumber.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Simu_PhoneNumber::release_number() {
  
  return number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Simu_PhoneNumber::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    
  } else {
    
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:ecma_protoc.Simu.PhoneNumber.number)
}

// optional .ecma_protoc.Simu.PhoneType type = 2;
inline void Simu_PhoneNumber::clear_type() {
  type_ = 0;
}
inline ::ecma_protoc::Simu_PhoneType Simu_PhoneNumber::type() const {
  // @@protoc_insertion_point(field_get:ecma_protoc.Simu.PhoneNumber.type)
  return static_cast< ::ecma_protoc::Simu_PhoneType >(type_);
}
inline void Simu_PhoneNumber::set_type(::ecma_protoc::Simu_PhoneType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ecma_protoc.Simu.PhoneNumber.type)
}

// -------------------------------------------------------------------

// Simu

// optional string name = 1;
inline void Simu::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Simu::name() const {
  // @@protoc_insertion_point(field_get:ecma_protoc.Simu.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Simu::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ecma_protoc.Simu.name)
}
inline void Simu::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ecma_protoc.Simu.name)
}
inline void Simu::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ecma_protoc.Simu.name)
}
inline ::std::string* Simu::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ecma_protoc.Simu.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Simu::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Simu::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ecma_protoc.Simu.name)
}

// optional int32 id = 2;
inline void Simu::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Simu::id() const {
  // @@protoc_insertion_point(field_get:ecma_protoc.Simu.id)
  return id_;
}
inline void Simu::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ecma_protoc.Simu.id)
}

// optional string email = 3;
inline void Simu::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Simu::email() const {
  // @@protoc_insertion_point(field_get:ecma_protoc.Simu.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Simu::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ecma_protoc.Simu.email)
}
inline void Simu::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ecma_protoc.Simu.email)
}
inline void Simu::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ecma_protoc.Simu.email)
}
inline ::std::string* Simu::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:ecma_protoc.Simu.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Simu::release_email() {
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Simu::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:ecma_protoc.Simu.email)
}

// repeated .ecma_protoc.Simu.PhoneNumber phones = 4;
inline int Simu::phones_size() const {
  return phones_.size();
}
inline void Simu::clear_phones() {
  phones_.Clear();
}
inline const ::ecma_protoc::Simu_PhoneNumber& Simu::phones(int index) const {
  // @@protoc_insertion_point(field_get:ecma_protoc.Simu.phones)
  return phones_.Get(index);
}
inline ::ecma_protoc::Simu_PhoneNumber* Simu::mutable_phones(int index) {
  // @@protoc_insertion_point(field_mutable:ecma_protoc.Simu.phones)
  return phones_.Mutable(index);
}
inline ::ecma_protoc::Simu_PhoneNumber* Simu::add_phones() {
  // @@protoc_insertion_point(field_add:ecma_protoc.Simu.phones)
  return phones_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ecma_protoc::Simu_PhoneNumber >*
Simu::mutable_phones() {
  // @@protoc_insertion_point(field_mutable_list:ecma_protoc.Simu.phones)
  return &phones_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ecma_protoc::Simu_PhoneNumber >&
Simu::phones() const {
  // @@protoc_insertion_point(field_list:ecma_protoc.Simu.phones)
  return phones_;
}

// -------------------------------------------------------------------

// Results

// repeated .ecma_protoc.Simu simu = 1;
inline int Results::simu_size() const {
  return simu_.size();
}
inline void Results::clear_simu() {
  simu_.Clear();
}
inline const ::ecma_protoc::Simu& Results::simu(int index) const {
  // @@protoc_insertion_point(field_get:ecma_protoc.Results.simu)
  return simu_.Get(index);
}
inline ::ecma_protoc::Simu* Results::mutable_simu(int index) {
  // @@protoc_insertion_point(field_mutable:ecma_protoc.Results.simu)
  return simu_.Mutable(index);
}
inline ::ecma_protoc::Simu* Results::add_simu() {
  // @@protoc_insertion_point(field_add:ecma_protoc.Results.simu)
  return simu_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ecma_protoc::Simu >*
Results::mutable_simu() {
  // @@protoc_insertion_point(field_mutable_list:ecma_protoc.Results.simu)
  return &simu_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ecma_protoc::Simu >&
Results::simu() const {
  // @@protoc_insertion_point(field_list:ecma_protoc.Results.simu)
  return simu_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ecma_protoc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ecma_protoc::Simu_PhoneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecma_protoc::Simu_PhoneType>() {
  return ::ecma_protoc::Simu_PhoneType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_results_5fformat_2eproto__INCLUDED
